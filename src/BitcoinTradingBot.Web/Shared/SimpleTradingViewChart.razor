@inject IJSRuntime JSRuntime
@inject ILogger<SimpleTradingViewChart> Logger
@implements IAsyncDisposable

<div id="@ChartId" style="width: 100%; height: @Height; background: #1e1e1e; border: 1px solid #333;">
    @if (IsLoading)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100%; color: white;">
            <div style="text-align: center;">
                <div style="margin-bottom: 10px;">Loading TradingView Chart...</div>
                <div style="width: 40px; height: 40px; border: 4px solid #333; border-top: 4px solid #26a69a; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto;"></div>
            </div>
        </div>
    }
    else if (HasError)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 100%; color: #ff6b6b; text-align: center;">
            <div>
                <div style="font-size: 18px; margin-bottom: 10px;">⚠️ Chart Error</div>
                <div style="font-size: 14px; margin-bottom: 10px;">@ErrorMessage</div>
                <button @onclick="RetryInitialization" style="background: #26a69a; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    Retry
                </button>
            </div>
        </div>
    }
</div>

<style>
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public string Height { get; set; } = "400px";
    [Parameter] public string? Symbol { get; set; } = "BTC/USDT";
    
    private string ChartId { get; set; } = $"chart-{Guid.NewGuid():N}";
    private bool IsLoading { get; set; } = true;
    private bool HasError { get; set; } = false;
    private string ErrorMessage { get; set; } = "";
    private IJSObjectReference? JSModule { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeChart();
        }
    }

    private async Task InitializeChart()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            StateHasChanged();

            Logger.LogInformation("Initializing TradingView chart for container: {ChartId}", ChartId);

            // Wait a moment for DOM to be ready
            await Task.Delay(100);

            // Create the chart
            var chart = await JSRuntime.InvokeAsync<IJSObjectReference>("TradingViewChart.createChart", ChartId);
            Logger.LogInformation("Chart created successfully");

            // Add candlestick series
            var series = await JSRuntime.InvokeAsync<IJSObjectReference>("TradingViewChart.addCandlestickSeries", ChartId);
            Logger.LogInformation("Candlestick series added");

            // Generate and set sample data
            var sampleData = await JSRuntime.InvokeAsync<object[]>("TradingViewChart.generateSampleData");
            await JSRuntime.InvokeVoidAsync("TradingViewChart.setData", series, sampleData);
            Logger.LogInformation("Sample data loaded");

            IsLoading = false;
            StateHasChanged();

            Logger.LogInformation("TradingView chart initialization completed successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize TradingView chart");
            
            IsLoading = false;
            HasError = true;
            ErrorMessage = $"Failed to load chart: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task RetryInitialization()
    {
        Logger.LogInformation("Retrying chart initialization");
        await InitializeChart();
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(ChartId))
            {
                await JSRuntime.InvokeVoidAsync("TradingViewChart.removeChart", ChartId);
                Logger.LogInformation("Chart disposed: {ChartId}", ChartId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error disposing chart: {ChartId}", ChartId);
        }
    }
} 