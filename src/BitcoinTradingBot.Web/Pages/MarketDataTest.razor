@page "/marketdata-test"
@using BitcoinTradingBot.Core.Models
@using BitcoinTradingBot.Core
@using System.Text.Json

<PageTitle>Market Data Validation</PageTitle>

<div class="container-fluid">
    <h1>üìä Market Data Module Validation</h1>
    <p class="text-muted">Testing PRD requirements: Basic functionality and data structures</p>

    <div class="row">
        <!-- Basic Tests -->
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-header">
                    <h5>üîß Basic Infrastructure Tests</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="TestDataModels">Test Data Models</button>
                        <span class="ms-2 @GetStatusClass(dataModelsStatus)">@dataModelsStatus</span>
                    </div>
                    
                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="TestTimeFrames">Test TimeFrames</button>
                        <span class="ms-2 @GetStatusClass(timeFramesStatus)">@timeFramesStatus</span>
                    </div>
                    
                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="TestSymbolValidation">Test Symbol Validation</button>
                        <span class="ms-2 @GetStatusClass(symbolStatus)">@symbolStatus</span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Configuration Tests -->
        <div class="col-md-6">
            <div class="card mb-3">
                <div class="card-header">
                    <h5>‚öôÔ∏è Configuration Tests</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <button class="btn btn-info" @onclick="TestConfiguration">Test Configuration</button>
                        <span class="ms-2 @GetStatusClass(configStatus)">@configStatus</span>
                    </div>
                    
                    <div class="mb-3">
                        <button class="btn btn-info" @onclick="TestValidationRules">Test Validation Rules</button>
                        <span class="ms-2 @GetStatusClass(validationStatus)">@validationStatus</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Display -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>üìã Test Results</h5>
                </div>
                <div class="card-body">
                    <pre class="bg-light p-3" style="max-height: 400px; overflow-y: auto;">@testResults</pre>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string dataModelsStatus = "Not tested";
    private string timeFramesStatus = "Not tested";
    private string symbolStatus = "Not tested";
    private string configStatus = "Not tested";
    private string validationStatus = "Not tested";
    private string testResults = "Click buttons above to run tests...";

    private void TestDataModels()
    {
        try
        {
            var results = new List<string>();
            
            // Test Symbol
            var symbol = new Symbol("BTCUSDT");
            results.Add($"‚úÖ Symbol created: {symbol.Value}");
            
            // Test Price
            var price = Price.Create(50000m);
            results.Add($"‚úÖ Price created: {price.Value:C}");
            
            // Test Quantity
            var quantity = Quantity.Create(1.5m);
            results.Add($"‚úÖ Quantity created: {quantity.Value}");
            
            // Test Candle model with proper constructor
            var candle = new Candle(
                Symbol: symbol,
                TimeFrame: TimeFrame.FiveMinutes,
                OpenTime: DateTime.UtcNow,
                Open: Price.Create(50000m),
                High: Price.Create(50100m),
                Low: Price.Create(49900m),
                Close: Price.Create(50050m),
                Volume: quantity,
                CloseTime: DateTime.UtcNow.AddMinutes(5)
            );
            
            results.Add($"‚úÖ Candle model created: {candle.Symbol.Value} @ {candle.Close.Value:C}");
            results.Add($"‚úÖ Candle is bullish: {candle.IsBullish}");
            results.Add($"‚úÖ Candle body size: {candle.BodySize:C}");
            
            dataModelsStatus = "‚úÖ Passed";
            testResults = string.Join("\n", results);
        }
        catch (Exception ex)
        {
            dataModelsStatus = "‚ùå Failed";
            testResults = $"‚ùå Error: {ex.Message}";
        }
    }

    private void TestTimeFrames()
    {
        try
        {
            var results = new List<string>();
            
            // Test all timeframes
            var timeframes = Enum.GetValues<TimeFrame>();
            foreach (var tf in timeframes)
            {
                results.Add($"‚úÖ TimeFrame: {tf}");
            }
            
            // Test specific timeframes
            results.Add($"‚úÖ 5M timeframe: {TimeFrame.FiveMinutes}");
            results.Add($"‚úÖ 4H timeframe: {TimeFrame.FourHours}");
            results.Add($"‚úÖ 1D timeframe: {TimeFrame.OneDay}");
            
            timeFramesStatus = "‚úÖ Passed";
            testResults = string.Join("\n", results);
        }
        catch (Exception ex)
        {
            timeFramesStatus = "‚ùå Failed";
            testResults = $"‚ùå Error: {ex.Message}";
        }
    }

    private void TestSymbolValidation()
    {
        try
        {
            var results = new List<string>();
            
            // Test valid symbols
            var validSymbols = new[] { "BTCUSDT", "ETHUSDT", "ADAUSDT" };
            foreach (var symbolStr in validSymbols)
            {
                var symbol = new Symbol(symbolStr);
                results.Add($"‚úÖ Valid symbol: {symbol.Value}");
            }
            
            // Test symbol properties
            var btc = new Symbol("BTCUSDT");
            results.Add($"‚úÖ Symbol validation passed for: {btc.Value}");
            results.Add($"‚úÖ Symbol length: {btc.Value.Length}");
            
            symbolStatus = "‚úÖ Passed";
            testResults = string.Join("\n", results);
        }
        catch (Exception ex)
        {
            symbolStatus = "‚ùå Failed";
            testResults = $"‚ùå Error: {ex.Message}";
        }
    }

    private void TestConfiguration()
    {
        try
        {
            var results = new List<string>();
            
            // Test configuration structure
            results.Add("‚úÖ Configuration structure:");
            results.Add("  - Trading.Symbol: BTCUSDT");
            results.Add("  - Trading.PrimaryTimeFrame: 4h");
            results.Add("  - Trading.EntryTimeFrame: 5m");
            results.Add("  - Trading.PaperTradingMode: true");
            results.Add("  - Exchange.Binance.BaseUrl configured");
            results.Add("  - Exchange.Binance.WebSocketUrl configured");
            
            // Test TradingConfiguration model
            var config = new TradingConfiguration(
                TradingSymbol: new Symbol("BTCUSDT"),
                MaxRiskPerTrade: 0.02m,
                MaxTotalExposure: 0.10m,
                KeltnerChannelPeriod: 20,
                KeltnerChannelMultiplier: 2.0m,
                EmaPeriod: 20,
                AtrPeriod: 10,
                PrimaryTimeFrame: TimeFrame.FourHours,
                EntryTimeFrame: TimeFrame.FiveMinutes,
                IsBacktestMode: false,
                IsEnabled: true
            );
            
            results.Add($"‚úÖ TradingConfiguration created for: {config.TradingSymbol.Value}");
            
            configStatus = "‚úÖ Passed";
            testResults = string.Join("\n", results);
        }
        catch (Exception ex)
        {
            configStatus = "‚ùå Failed";
            testResults = $"‚ùå Error: {ex.Message}";
        }
    }

    private void TestValidationRules()
    {
        try
        {
            var results = new List<string>();
            
            // Test data validation rules
            results.Add("‚úÖ Data Validation Rules:");
            results.Add("  - Price must be > 0");
            results.Add("  - Volume must be >= 0");
            results.Add("  - High >= Low");
            results.Add("  - Open/Close within High/Low range");
            results.Add("  - CloseTime > OpenTime");
            results.Add("  - Symbol format validation");
            
            // Test actual validation with proper constructor
            var symbol = new Symbol("BTCUSDT");
            var candle = new Candle(
                Symbol: symbol,
                TimeFrame: TimeFrame.FiveMinutes,
                OpenTime: DateTime.UtcNow,
                Open: Price.Create(50000m),
                High: Price.Create(50100m),
                Low: Price.Create(49900m),
                Close: Price.Create(50050m),
                Volume: Quantity.Create(1.5m),
                CloseTime: DateTime.UtcNow.AddMinutes(5)
            );
            
            if (candle.High.Value >= candle.Low.Value && candle.Open.Value > 0 && candle.Close.Value > 0)
            {
                results.Add("‚úÖ Sample candle passes validation");
            }
            
            // Test KeltnerChannel model
            var keltner = new KeltnerChannel(
                MiddleBand: Price.Create(50000m),
                UpperBand: Price.Create(51000m),
                LowerBand: Price.Create(49000m),
                Atr: 500m,
                Timestamp: DateTime.UtcNow
            );
            
            results.Add($"‚úÖ KeltnerChannel created with width: {keltner.Width:C}");
            
            validationStatus = "‚úÖ Passed";
            testResults = string.Join("\n", results);
        }
        catch (Exception ex)
        {
            validationStatus = "‚ùå Failed";
            testResults = $"‚ùå Error: {ex.Message}";
        }
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            var s when s.StartsWith("‚úÖ") => "text-success",
            var s when s.StartsWith("‚ùå") => "text-danger",
            var s when s.StartsWith("‚ö†Ô∏è") => "text-warning",
            _ => "text-muted"
        };
    }
} 